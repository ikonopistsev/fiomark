#!/bin/bash

LC_ALL=C

TEST=".fiomark.test"

SIZE=1024
LOOP=3
DIRECTIO=0
WRITEZERO=0
ENGINE=posixaio
PARSE=0
# windows fix
#THREAD=--thread
BLOCK_SIZE=4

if [ -z $HOME ]; then
# windows
    HOME_DIR=$HOMEDRIVE$HOMEPATH
else
    HOME_DIR=$HOME
fi

TEST_DIR="."
TEST_FILE=$TEST_DIR/$TEST

read_arg() {
    case "$1" in
        1)
            LOOP=1
        ;;
        3)
            LOOP=3
        ;;
        5)
            LOOP=5
        ;;
        8k)
            BLOCK_SIZE=8
        ;;
        16k)
            BLOCK_SIZE=16
        ;;
        32k)
            BLOCK_SIZE=32
        ;;
        64k)
            BLOCK_SIZE=64
        ;;
        128k)
            BLOCK_SIZE=128
        ;;
        256k)
            BLOCK_SIZE=256
        ;;
        512k)
            BLOCK_SIZE=512
        ;;
        50m)
            SIZE=50
        ;;
        64m)
            SIZE=64
        ;;
        100m)
            SIZE=100
        ;;
        128m)
            SIZE=128
        ;;
        250m)
            SIZE=250
        ;;
        256m)
            SIZE=256
        ;;
        500m)
            SIZE=500
        ;;
        512m)
            SIZE=512
        ;;
        1000m)
            SIZE=1000
        ;;
        1024m)
            SIZE=1024
        ;;
        2000m)
            SIZE=2000
        ;;
        2048m)
            SIZE=2048
        ;;
        parse)
            PARSE=1
        ;;
        posixaio)
            ENGINE=posixaio
        ;;
        libaio)
            ENGINE=libaio
        ;;
        mmap)
            ENGINE=mmap
        ;;
        splice)
    	    ENGINE=splice
    	;;
        direct)
            DIRECTIO=1
        ;;
        zero)
            WRITEZERO=1
        ;;
	windowsaio)
	    ENGINE=windowsaio
	    THREAD=--thread
	;;
	thread)
	    THREAD=--thread
	;;
        *)
            [ -d "$1" ] && TEST_DIR=$1 && TEST_FILE=$TEST_DIR/$TEST
        ;;
    esac
}

for var in "$@"
do
    read_arg $var
done

[ ! -d "$TEST_DIR" ] &&
    echo "Usage: $0 loop={1|3|5|} size={50m|64m|100m|128m|250m|256m|500m|512m|1000m|1024m|2000m|2048m}" &&
    echo "       engine={posixaio|libaio|mmap,windowsaio,splice} {thread,direct,zero} /test_dir" &&
    exit 1

HEADER=$HOME_DIR/".fiomark"
S321=$HOME_DIR/".fiomark1"
Q8T8=$HOME_DIR/".fiomark2"
Q32T1=$HOME_DIR/".fiomark3"
Q1T1=$HOME_DIR/".fiomark4"

QSIZE=$(($SIZE/32))
SIZE=$SIZE"m"
QSIZE=$QSIZE"m"
RUNTIME=$(($LOOP*5))
BLOCK_SIZE=$BLOCK_SIZE"k"

show_result() {
    [ ! -f $1 ] && echo "no file: $1" && exit 1

    D=1000 # in crystal mark
    #D=1024
    
#    N=$(jq -r 'has("jobs")' $1)
#    [ $? -ne 0 ] && exit 1
    
    Q=$2
    T=$3
    S=$4
    L=$5

    RD=$(jq -r '.jobs[].read.bw' $1|jq -s ".|add/$D")
    [ $? -ne 0 ] && exit 1
    WR=$(jq -r '.jobs[].write.bw' $1|jq -s ".|add/$D")
    RDI=$(jq -r '.jobs[].read.iops' $1|jq -s '.|add')
    WRI=$(jq -r '.jobs[].write.iops' $1|jq -s '.|add')
    #Q=$(jq -r '.jobs[0]."job options".iodepth' $1)
    #T=$(jq -r '.jobs[0]."job options".numjobs' $1)
    #S=$(jq -r '.jobs[0]."job options".bs' $1)
    #L=$(jq -r '.jobs[0]."job options".rw' $1)
    #E=$(jq -r '."global options".ioengine' $1)
    #D=$(jq -r '."global options".direct' $1)
    #SZ=$(jq -r '."global options".size' $1)
    #[ "$L" = "read" ] && echo -n "seq " 
    #[ "$L" = "write" ] && echo -n "seq "
    #[ "$D" = 1 ] && echo -n "direct "
    #echo $E $SZ
    OPT="Q"$Q"T"$T
    printf "%7s\t%7s\t%12.3f %12.3f\n" $S $OPT $RD $WR
    printf "%7s\t%7s\t%12.1f %12.1f\n\n"  " " "iops" $RDI $WRI
}

if [ $PARSE = 0 ]; then
    echo -n "$ENGINE " > $HEADER
    [ $DIRECTIO = 1 ] && echo -n "direct " >> $HEADER
    [ $WRITEZERO = 1 ] && echo -n "zero " >> $HEADER
    echo "$SIZE loop=$LOOP $TEST_DIR" >> $HEADER
fi

[ -f $HEADER ] && cat $HEADER

echo "Running..."

[ $PARSE = 0 ] && 
    fio --runtime=$RUNTIME --loops=$LOOP --size=$SIZE --filename="$TEST_FILE" --stonewall --ioengine=$ENGINE --direct=$DIRECTIO --zero_buffers=$WRITEZERO --output-format=json $THREAD \
        --name=q32t1rd --bs=$QSIZE --iodepth=32 --numjobs=1 --rw=read \
        --name=q32t1wr --bs=$QSIZE --iodepth=32 --numjobs=1 --rw=write > $S321

[ $? -ne 0 ] && [ $PARSE -eq 0 ] && exit 1

printf "%7s\t%7s\t%12s %12s\n" " " " " "Read [MB/s]"  "Write [MB/s]"

show_result $S321 32 1 $QSIZE read

#exit 0

[ $PARSE = 0 ] && 
    fio --runtime=$RUNTIME --loops=$LOOP --size=$SIZE --filename=$TEST_FILE --stonewall --ioengine=$ENGINE --direct=$DIRECTIO --zero_buffers=$WRITEZERO --output-format=json $THREAD \
        --name=4kq8t8rd --bs=$BLOCK_SIZE --iodepth=8 --numjobs=8 --rw=randread \
        --name=4kq8t8wr --bs=$BLOCK_SIZE --iodepth=8 --numjobs=8 --rw=randwrite > $Q8T8

[ $? -ne 0 ] && [ $PARSE -eq 0 ] && exit 1

show_result $Q8T8 8 8 $BLOCK_SIZE randread

[ $PARSE -eq 0 ] && 
    fio --runtime=$RUNTIME --loops=$LOOP --size=$SIZE --filename=$TEST_FILE --stonewall --ioengine=$ENGINE --direct=$DIRECTIO --zero_buffers=$WRITEZERO --output-format=json $THREAD \
        --name=4kq32t1rd --bs=$BLOCK_SIZE --iodepth=32 --numjobs=1 --rw=randread \
        --name=4kq32t1wr --bs=$BLOCK_SIZE --iodepth=32 --numjobs=1 --rw=randwrite > $Q32T1 

[ $? -ne 0 ] && [ $PARSE -eq 0 ] && exit 1

show_result $Q32T1 32 1 $BLOCK_SIZE randread

[ $PARSE -eq 0 ] && 
    fio --runtime=$RUNTIME --loops=$LOOP --size=$SIZE --filename=$TEST_FILE --stonewall --ioengine=$ENGINE --direct=$DIRECTIO --zero_buffers=$WRITEZERO --output-format=json $THREAD \
        --name=4kq1t1rd --bs=$BLOCK_SIZE --iodepth=1 --numjobs=1 --rw=randread \
        --name=4kq1t1wr --bs=$BLOCK_SIZE --iodepth=1 --numjobs=1 --rw=randwrite > $Q1T1 

[ $? -ne 0 ] && [ $PARSE -eq 0 ] && exit 1

show_result $Q1T1 1 1 $BLOCK_SIZE randread

[ -f $TEST_FILE ] && rm $TEST_FILE
