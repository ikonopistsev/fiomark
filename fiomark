#!/bin/bash

LC_ALL=C

SIZE=1024
LOOP=3
DIRECTIO=0
WRITEZERO=0
ENGINE=posixaio
PARSE=0
# windows fix
#THREAD=--thread
BLOCK_SIZE=4
SEC=5
SEQ=1
TEST_DIR="."
TEST_NAME=".fiomark.test"
TEST_FILE=$TEST_DIR/$TEST_NAME
BLOCKDEV=0
F=0
DPT=8
THR=8

#detect home
if [ -z $HOME ]; then
# windows
    HOME_DIR=$HOMEDRIVE$HOMEPATH
else
    HOME_DIR=$HOME
fi

#reports
HEADER=$HOME_DIR/".fiomark"
S321=$HOME_DIR/".fiomark1"
Q8T8=$HOME_DIR/".fiomark2"
Q32T1=$HOME_DIR/".fiomark3"
Q1T1=$HOME_DIR/".fiomark4"
SEQ1M=$HOME_DIR/".fiomark5"
SEQ11M=$HOME_DIR/".fiomark6"
Q32T16=$HOME_DIR/".fiomark7"

read_arg() {
    case "$1" in
        1)
            LOOP=1
        ;;
        3)
            LOOP=3
        ;;
        5)
            LOOP=5
        ;;
	4q)
	    DPT=8
	;;
	16q)
	    DPT=16
	;;
	32q)
	    DPT=32
	;;
	64q)
	    DPT=64
	;;
	4t)
	    THR=4
	;;
	16t)
	    THR=16
	;;
	32t)
	    THR=32
	;;
	64t)
	    THR=64
	;;
        8k)
            BLOCK_SIZE=8
        ;;
        16k)
            BLOCK_SIZE=16
        ;;
        32k)
            BLOCK_SIZE=32
        ;;
        64k)
            BLOCK_SIZE=64
        ;;
        128k)
            BLOCK_SIZE=128
        ;;
        256k)
            BLOCK_SIZE=256
        ;;
        512k)
            BLOCK_SIZE=512
        ;;
        50m)
            SIZE=50
        ;;
        64m)
            SIZE=64
        ;;
        100m)
            SIZE=100
        ;;
        128m)
            SIZE=128
        ;;
        250m)
            SIZE=250
        ;;
        256m)
            SIZE=256
        ;;
        500m)
            SIZE=500
        ;;
        512m)
            SIZE=512
        ;;
        1000m)
            SIZE=1000
        ;;
        1g)
            SIZE=1024
        ;;
        2g)
            SIZE=2048
        ;;
        4g)
            SIZE=4096
        ;;
        8g)
            SIZE=8192
            SEC=10
        ;;
        16g)
            SIZE=16384
            SEC=20
        ;;
        32g)
            SIZE=32768
            SEC=30
        ;;
        64g)
            SIZE=65536
            SEC=60
        ;;
        parse)
            PARSE=1
        ;;
        'sync')
            ENGINE='sync'
        ;;
        psync)
            ENGINE=psync
        ;;
        vsync)
            ENGINE=vsync
        ;;
        pvsync)
            ENGINE=pvsync
        ;;
        pvsync2)
            ENGINE=pvsync2
        ;;
        posixaio)
            ENGINE=posixaio
        ;;
        libaio)
            ENGINE=libaio
        ;;
	io_uring)
		ENGINE=io_uring
	;;
        mmap)
            ENGINE=mmap
        ;;
        splice)
    	    ENGINE=splice
    	;;
        direct)
            DIRECTIO=1
        ;;
        zero)
            WRITEZERO=1
        ;;
	    windowsaio)
            ENGINE=windowsaio
            THREAD=--thread
        ;;
        thread)
            THREAD=--thread
        ;;
        noseq)
            SEQ=0
        ;;
        help)
            echo "Usage: $0 loop={1|3|5|} size={50m|64m|100m|128m|250m|256m|500m|512m|1000m|1024m|2000m|2048m}" &&
            echo "       engine={posixaio|libaio|mmap,windowsaio,splice} {thread,direct,zero} /test_dir" &&
            exit 1
        ;;
        *)
            if [ -b "$1" ]; then
                TEST_FILE=$1
                TEST_DIR=$1
                BLOCKDEV=1
                F=1
            else
                if [ -f "$1" ]; then
                    TEST_FILE=$1
                    TEST_DIR=$1
                    BLOCKDEV=0
                    F=1
                else
                    if [ -d "$1" ]; then
                        TEST_DIR="$1"
                        TEST_FILE=$1/$TEST_NAME
                        BLOCKDEV=0
                        F=0
                    fi
                fi
            fi
        ;;
    esac
}

#parse args
for var in "$@"
do
    read_arg $var
done


#show menu :)
if [ $PARSE = 0 ]; then
    if [ $BLOCKDEV = 1 ]; then
        echo -n "use blockdev $TEST_FILE ? [y/N] "
        read -n1 ANS && [ $ANS != "y" ] && exit 1
        echo ""
    else
        if [ $F = 1 ]; then
	    if [ -z $HOMEDRIVE ]; then 
            	echo -n "overwrite file $TEST_FILE ? [y/N] "
            	read -n1 ANS && [ $ANS != "y" ] && exit 1
            	echo ""
	    fi
        else
            if [ ! -d $TEST_DIR ]; then
                echo "Error path: $TEST_DIR"
                exit 1
            fi
        fi
    fi
fi

QSIZE=$(($SIZE/32))
SIZE=$SIZE"m"
QSIZE=$QSIZE"m"
RUNTIME=$(($LOOP*$SEC))
BLOCK_SIZE=$BLOCK_SIZE"k"

show_result() {
    [ ! -f $1 ] && echo "no file: $1" && exit 1
    
    P=$(jq -r .time $1)
    [ $? -ne 0 ] && exit 1

    D=1000 # in crystal mark   
    Q=$2
    T=$3
    S=$4
    L=$5

    RD=$(jq -r '.jobs[].read.bw' $1|jq -s ".|add/$D")
    WR=$(jq -r '.jobs[].write.bw' $1|jq -s ".|add/$D")
    RDI=$(jq -r '.jobs[].read.iops' $1|jq -s '.|add')
    WRI=$(jq -r '.jobs[].write.iops' $1|jq -s '.|add')
    #Q=$(jq -r '.jobs[0]."job options".iodepth' $1)
    #T=$(jq -r '.jobs[0]."job options".numjobs' $1)
    #S=$(jq -r '.jobs[0]."job options".bs' $1)
    #L=$(jq -r '.jobs[0]."job options".rw' $1)
    #E=$(jq -r '."global options".ioengine' $1)
    #D=$(jq -r '."global options".direct' $1)
    #SZ=$(jq -r '."global options".size' $1)
    #[ "$L" = "read" ] && echo -n "seq " 
    #[ "$L" = "write" ] && echo -n "seq "
    #[ "$D" = 1 ] && echo -n "direct "
    #echo $E $SZ
    OPT="Q"$Q"T"$T
    printf "%7s\t%7s\t%12.3f %12.3f\n" $S $OPT $RD $WR
    printf "%7s\t%7s\t%12.1f %12.1f\n\n"  " " "iops" $RDI $WRI
}

if [ $PARSE = 0 ]; then
    echo -n "$ENGINE " > $HEADER
    [ $DIRECTIO = 1 ] && echo -n "direct " >> $HEADER
    [ $WRITEZERO = 1 ] && echo -n "zero " >> $HEADER
    echo "$SIZE loop=$LOOP $TEST_DIR" >> $HEADER
fi

[ -f $HEADER ] && cat $HEADER

echo "CRM7 Running... "

[ $PARSE = 0 ] && [ $SEQ = 1 ] &&
    fio --runtime=$RUNTIME --loops=$LOOP --size=$SIZE --filename="$TEST_FILE" --stonewall --ioengine=$ENGINE --direct=$DIRECTIO --zero_buffers=$WRITEZERO --output-format=json $THREAD \
        --name=seq1mrd --bs=1m --iodepth=8 --numjobs=1 --rw=read \
        --name=seq1mwr --bs=1m --iodepth=8 --numjobs=1 --rw=write > $SEQ1M && [ $? != 0 ] && exit 1

printf "%7s\t%7s\t%12s %12s\n" " " " " "Read [MB/s]"  "Write [MB/s]"

show_result $SEQ1M 8 1 1m read

[ $PARSE = 0 ] && [ $SEQ = 1 ] &&
    fio --runtime=$RUNTIME --loops=$LOOP --size=$SIZE --filename="$TEST_FILE" --stonewall --ioengine=$ENGINE --direct=$DIRECTIO --zero_buffers=$WRITEZERO --output-format=json $THREAD \
        --name=seq1mrd --bs=1m --iodepth=1 --numjobs=1 --rw=read \
        --name=seq1mwr --bs=1m --iodepth=1 --numjobs=1 --rw=write > $SEQ11M && [ $? != 0 ] && exit 1

printf "%7s\t%7s\t%12s %12s\n" " " " " "Read [MB/s]"  "Write [MB/s]"

show_result $SEQ11M 1 1 1m read

[ $PARSE = 0 ] && 
    fio --runtime=$RUNTIME --loops=$LOOP --size=$SIZE --filename=$TEST_FILE --stonewall --ioengine=$ENGINE --direct=$DIRECTIO --zero_buffers=$WRITEZERO --output-format=json $THREAD \
        --name=4kq32t16rd --bs=$BLOCK_SIZE --iodepth=32 --numjobs=16 --rw=randread \
        --name=4kq32t16wr --bs=$BLOCK_SIZE --iodepth=32 --numjobs=16 --rw=randwrite > $Q32T16 && [ $? != 0 ] && exit 1

show_result $Q32T16 32 16 $BLOCK_SIZE randread

echo "CRM6 Running... "

[ $PARSE = 0 ] && [ $SEQ = 1 ] &&
    fio --runtime=$RUNTIME --loops=$LOOP --size=$SIZE --filename="$TEST_FILE" --stonewall --ioengine=$ENGINE --direct=$DIRECTIO --zero_buffers=$WRITEZERO --output-format=json $THREAD \
        --name=q32t1rd --bs=$QSIZE --iodepth=32 --numjobs=1 --rw=read \
        --name=q32t1wr --bs=$QSIZE --iodepth=32 --numjobs=1 --rw=write > $S321 && [ $? != 0 ] && exit 1

printf "%7s\t%7s\t%12s %12s\n" " " " " "Read [MB/s]"  "Write [MB/s]"

show_result $S321 32 1 $QSIZE read

[ $PARSE = 0 ] && 
    fio --runtime=$RUNTIME --loops=$LOOP --size=$SIZE --filename=$TEST_FILE --stonewall --ioengine=$ENGINE --direct=$DIRECTIO --zero_buffers=$WRITEZERO --output-format=json $THREAD \
        --name=4kq8t8rd --bs=$BLOCK_SIZE --iodepth=$DPT --numjobs=$THR --rw=randread \
        --name=4kq8t8wr --bs=$BLOCK_SIZE --iodepth=$DPT --numjobs=$THR --rw=randwrite > $Q8T8 && [ $? != 0 ] && exit 1

show_result $Q8T8 $DPT $THR $BLOCK_SIZE randread

[ $PARSE = 0 ] && 
    fio --runtime=$RUNTIME --loops=$LOOP --size=$SIZE --filename=$TEST_FILE --stonewall --ioengine=$ENGINE --direct=$DIRECTIO --zero_buffers=$WRITEZERO --output-format=json $THREAD \
        --name=4kq32t1rd --bs=$BLOCK_SIZE --iodepth=32 --numjobs=1 --rw=randread \
        --name=4kq32t1wr --bs=$BLOCK_SIZE --iodepth=32 --numjobs=1 --rw=randwrite > $Q32T1 && [ $? != 0 ] && exit 1

show_result $Q32T1 32 1 $BLOCK_SIZE randread

[ $PARSE = 0 ] && 
    fio --runtime=$RUNTIME --loops=$LOOP --size=$SIZE --filename=$TEST_FILE --stonewall --ioengine=$ENGINE --direct=$DIRECTIO --zero_buffers=$WRITEZERO --output-format=json $THREAD \
        --name=4kq1t1rd --bs=$BLOCK_SIZE --iodepth=1 --numjobs=1 --rw=randread \
        --name=4kq1t1wr --bs=$BLOCK_SIZE --iodepth=1 --numjobs=1 --rw=randwrite > $Q1T1 && [ $? != 0 ] && exit 1

show_result $Q1T1 1 1 $BLOCK_SIZE randread

[ $BLOCKDEV = 0 ] && [ -f $TEST_FILE ] && rm $TEST_FILE
